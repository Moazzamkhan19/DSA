import java.util.ArrayList;

public class BST
{
    Node root;
    public BST()
    {
        root=null;
    }
    public void Insert(int key)
    {
        root=Insert(root,key);
    }
    public void PrintPreOrder()
    {
        PreOrder(root);
    }
    public void PrintPostOrder()
    {
        PostOrder(root);
    }
    public void PrintInOrder(){InOrder(root);}
    public  Node Insert(Node node ,int key)
    {
        Node newnode=new Node(key);
        if(node==null)
        {
            node=newnode;
        }
        else
        {
            if(key<node.key)
            {
                node.left=Insert(node.left,key);
            }
            else if(newnode.key>node.key)
            {
                node.right=Insert(node.right,key);
            }
            else
            {
                System.out.println("Enter valid number");
            }
        }
        return node;
    }
    public void PreOrder(Node node)
    {
        if(node!=null)
        {
            System.out.print(node.key+" ");
            PreOrder(node.left);
            PreOrder(node.right);
        }

    }
    public void PostOrder(Node node)
    {
        if(node!=null)
        {
            PostOrder(node.left);
            PostOrder(node.right);
            System.out.print(node.key+" ");
        }
    }
    public void InOrder(Node node)
    {
        if(node!=null)
        {
            InOrder(node.left);
            System.out.print(node.key+" ");
            InOrder(node.right);
        }
    }
    public boolean hasleft(Node node)
    {
        if(node.left!=null)
        {
           return true;
        }
        else{
        return false;}
    }
    public boolean hasright(Node node)
    {
        if(node.right!=null)
        {
            return true;
        }
        else{
            return false;}
    }
    public boolean hasChild(Node node)
    {
        if(node.left!=null &&  node.right!=null)
        {
            return true;
        }
        return false;
    }
    public Node Parent(Node node, Node root)
    {
        if (node == null || root == null)
        {
            return null;
        }
        if ((root.left != null && root.left.key == node.key) || (root.right != null && root.right.key == node.key)) {
            return root;
        }

        if (node.key < root.key) {
            return Parent(node, root.left);
        }
        else if (node.key > root.key)
        {
            return Parent(node, root.right);
        }
        else {
            System.out.println("Enter a valid node");
            return null;
        }
    }
    public Node Sibling(Node node) {
        if (node == null)
        {
            return null;
        }
        Node parent = Parent(node, root);
        if (parent == null)
        {
            return null;
        }
        if (parent.left != null && parent.left.key == node.key)
        {
            return parent.right;
        }
        else if (parent.right != null && parent.right.key == node.key)
        {
            return parent.left;
        }
        else
        {
            return null;
        }
    }

    public Node Delete(Node root, int key)
    {
        if (root == null)
        {
            return root;
        }
        // Traverse the tree to find the node to be deleted
        if (key < root.key)
        {
            root.left = Delete(root.left, key);
        }
        else if (key > root.key)
        {
            root.right = Delete(root.right, key);
        }
        else
        {
            // Node to be deleted found
            // Case 1: Node with no child (leaf node)
            if (root.left == null && root.right == null) {
                return null;
            }

            // Case 2: Node with one child
            if (root.left == null) {
                return root.right;
            }
            else if (root.right == null)
            {
                return root.left;
            }

            // Case 3: Node with two children

            Node successor = findMin(root.right);
            root.key = successor.key;
            root.right = Delete(root.right, successor.key);
        }

        return root;
    }

    public Node findMin(Node node) {
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }
    public Node findNode(Node root, int key) {
        if (root == null || root.key == key) {
            return root;
        }
        if (key < root.key) {
            return findNode(root.left, key);
        } else {
            return findNode(root.right, key);
        }
    }
    public void leftsubtree(Node node)
    {
        if(node!=null)
        {
            System.out.print(node.key+" ");
            leftsubtree(node.left);
            leftsubtree(node.right);
        }

    }
    public void leftsubtreeprint()
    {
        leftsubtree(root.left);
    }

    public void InorderTraversal(Node node,ArrayList<Integer>arr)
    {
        if(node!=null)
        {
            InorderTraversal(node.left,arr);
            arr.add(node.key);
            InorderTraversal(node.right,arr);
        }
    }
    public int InorderPredecessor(int key)
    {
        ArrayList<Integer>arr=new ArrayList<>();
        InorderTraversal(root,arr);

       for(int i=0;i<arr.size();i++)
       {
           if(arr.get(i)==key)
           {
               return arr.get(i-1) ;
           }
       }
       return 0;
    }
    public int InorderSucessor(int key)
    {
        ArrayList<Integer>arr=new ArrayList<>();
        InorderTraversal(root,arr);

        for(int i=0;i<arr.size();i++)
        {
            if(arr.get(i)==key)
            {
                return arr.get(i+1) ;
            }
        }
        return 0;
    }
  public int sum()
    {
        ArrayList<Integer>arr=new ArrayList<>();
        InorderTraversal(root,arr);
        int sum=0;

        for(int i=0;i<arr.size();i++)
        {
            sum=sum+ arr.get(i);
        }

        return sum;
    }
    public int Height(Node node)
    {
        if(node==null)
        {
            return 0;
        }
        else
        {
            int leftside=Height(node.left);
            int rightside=Height(node.right);
            return Math.max(leftside,rightside)+1;
        }
    }
    public int depth(Node node,Node root)
    {
        if(node==null)
        {
            return 0;
        }
        if(root.key==node.key)
        {
            return 0;
        }
        if(root.key>node.key)
        {
            int leftdepth=depth(node,node.left);
            if(leftdepth==-1)
            {
                return -1;
            }
            else
            {
                return leftdepth+1;
            }
        }
        else
        {
            int rightdepth=depth(node,node.right);
            if(rightdepth==-1)
            {
                return -1;
            }
            else
            {
                return rightdepth+1;
            }
        }
    }
    public Node RemoveIdentical()
    {
        ArrayList<Integer>arr=new ArrayList<>();
        InorderTraversal(root,arr);
        System.out.println("Inorder-Traversal-Order");
        for(int i=0;i<arr.size();i++)
        {
            System.out.print(arr.get(i)+" ");
        }
        //now checking for an identical numbers occuring
        int identical=0;
        for(int i=0;i<arr.size();i++)
        {
            for(int j=0;j<arr.size();j++)
            {
                if(arr.get(i)==arr.get(j))
                {
                    System.out.println("Identical appearance of "+arr.get(i));
                    identical=arr.get(i);
                }
            }
        }
        //now removing that identical appearance
        Delete(root,identical);
        return root;
    }
    public boolean isBST(Node node)
    {
        if(node==null)
        {
            return true;
        }
        if(node.left.key>node.key)
        {
            return true;
        }
        if (node.right.key>node.key)
        {
            return true;
        }
        return isBST(node.left) && isBST(node.right);
    }

}
